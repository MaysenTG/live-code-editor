{"version":3,"sources":["../static/js/61.56c18ce0.chunk.js","../node_modules/codemirror/mode/r/r.js"],"names":["webpackJsonp","112","module","exports","__webpack_require__","mod","CodeMirror","registerHelper","defineMode","config","wordObj","words","res","i","length","tokenBase","stream","state","curPunc","ch","next","skipToEnd","eat","eatWhile","match","test","tokenize","tokenString","word","current","atoms","propertyIsEnumerable","keywords","blockkeywords","builtins","skipTo","ctx","argList","opChars","quote","backUp","push","type","indent","flags","column","prev","setFlag","flag","pop","commonAtoms","commonBuiltins","commonKeywords","commonBlockKeywords","concat","startState","indentUnit","afterIdent","token","sol","indentation","eatSpace","style","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"mappings":"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","file":"static/js/61.56c18ce0.chunk.js","sourcesContent":["webpackJsonp([61],{\n\n/***/ 112:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"wordChars\", \"r\", /[\\w.]/);\n\nCodeMirror.defineMode(\"r\", function(config) {\n  function wordObj(words) {\n    var res = {};\n    for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n    return res;\n  }\n  var commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\n  var commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\n  var commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\n  var commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"r\", commonAtoms.concat(commonBuiltins, commonKeywords));\n\n  var atoms = wordObj(commonAtoms);\n  var builtins = wordObj(commonBuiltins);\n  var keywords = wordObj(commonKeywords);\n  var blockkeywords = wordObj(commonBlockKeywords);\n  var opChars = /[+\\-*\\/^<>=!&|~$:]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    curPunc = null;\n    var ch = stream.next();\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"0\" && stream.eat(\"x\")) {\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    } else if (ch == \".\" && stream.eat(/\\d/)) {\n      stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n      return \"number\";\n    } else if (/\\d/.test(ch)) {\n      stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n      return \"number\";\n    } else if (ch == \"'\" || ch == '\"') {\n      state.tokenize = tokenString(ch);\n      return \"string\";\n    } else if (ch == \"`\") {\n      stream.match(/[^`]+`/);\n      return \"variable-3\";\n    } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n      return \"keyword\";\n    } else if (/[a-zA-Z\\.]/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      var word = stream.current();\n      if (atoms.propertyIsEnumerable(word)) return \"atom\";\n      if (keywords.propertyIsEnumerable(word)) {\n        // Block keywords start new blocks, except 'else if', which only starts\n        // one new block for the 'if', no block for the 'else'.\n        if (blockkeywords.propertyIsEnumerable(word) &&\n            !stream.match(/\\s*if(\\s+|$)/, false))\n          curPunc = \"block\";\n        return \"keyword\";\n      }\n      if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n      return \"variable\";\n    } else if (ch == \"%\") {\n      if (stream.skipTo(\"%\")) stream.next();\n      return \"operator variable-2\";\n    } else if (\n        (ch == \"<\" && stream.eat(\"-\")) ||\n        (ch == \"<\" && stream.match(\"<-\")) ||\n        (ch == \"-\" && stream.match(/>>?/))\n      ) {\n      return \"operator arrow\";\n    } else if (ch == \"=\" && state.ctx.argList) {\n      return \"arg-is\";\n    } else if (opChars.test(ch)) {\n      if (ch == \"$\") return \"operator dollar\";\n      stream.eatWhile(opChars);\n      return \"operator\";\n    } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n      curPunc = ch;\n      if (ch == \";\") return \"semi\";\n      return null;\n    } else {\n      return null;\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      if (stream.eat(\"\\\\\")) {\n        var ch = stream.next();\n        if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n        else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n        else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n        else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n        else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n        return \"string-2\";\n      } else {\n        var next;\n        while ((next = stream.next()) != null) {\n          if (next == quote) { state.tokenize = tokenBase; break; }\n          if (next == \"\\\\\") { stream.backUp(1); break; }\n        }\n        return \"string\";\n      }\n    };\n  }\n\n  var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4\n\n  function push(state, type, stream) {\n    state.ctx = {type: type,\n                 indent: state.indent,\n                 flags: 0,\n                 column: stream.column(),\n                 prev: state.ctx};\n  }\n  function setFlag(state, flag) {\n    var ctx = state.ctx\n    state.ctx = {type: ctx.type,\n                 indent: ctx.indent,\n                 flags: ctx.flags | flag,\n                 column: ctx.column,\n                 prev: ctx.prev}\n  }\n  function pop(state) {\n    state.indent = state.ctx.indent;\n    state.ctx = state.ctx.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              ctx: {type: \"top\",\n                    indent: -config.indentUnit,\n                    flags: ALIGN_NO},\n              indent: 0,\n              afterIdent: false};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO\n        if (state.ctx.flags & BRACELESS) pop(state)\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES)\n\n      if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n      if (curPunc == \"{\") push(state, \"}\", stream);\n      else if (curPunc == \"(\") {\n        push(state, \")\", stream);\n        if (state.afterIdent) state.ctx.argList = true;\n      }\n      else if (curPunc == \"[\") push(state, \"]\", stream);\n      else if (curPunc == \"block\") push(state, \"block\", stream);\n      else if (curPunc == state.ctx.type) pop(state);\n      else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS)\n      state.afterIdent = style == \"variable\" || style == \"keyword\";\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n          closing = firstChar == ctx.type;\n      if (ctx.flags & BRACELESS) ctx = ctx.prev\n      if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : config.indentUnit);\n      else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indent + (closing ? 0 : config.indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rsrc\", \"r\");\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/61.56c18ce0.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"wordChars\", \"r\", /[\\w.]/);\n\nCodeMirror.defineMode(\"r\", function(config) {\n  function wordObj(words) {\n    var res = {};\n    for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n    return res;\n  }\n  var commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\n  var commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\n  var commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\n  var commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"r\", commonAtoms.concat(commonBuiltins, commonKeywords));\n\n  var atoms = wordObj(commonAtoms);\n  var builtins = wordObj(commonBuiltins);\n  var keywords = wordObj(commonKeywords);\n  var blockkeywords = wordObj(commonBlockKeywords);\n  var opChars = /[+\\-*\\/^<>=!&|~$:]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    curPunc = null;\n    var ch = stream.next();\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"0\" && stream.eat(\"x\")) {\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    } else if (ch == \".\" && stream.eat(/\\d/)) {\n      stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n      return \"number\";\n    } else if (/\\d/.test(ch)) {\n      stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n      return \"number\";\n    } else if (ch == \"'\" || ch == '\"') {\n      state.tokenize = tokenString(ch);\n      return \"string\";\n    } else if (ch == \"`\") {\n      stream.match(/[^`]+`/);\n      return \"variable-3\";\n    } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n      return \"keyword\";\n    } else if (/[a-zA-Z\\.]/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      var word = stream.current();\n      if (atoms.propertyIsEnumerable(word)) return \"atom\";\n      if (keywords.propertyIsEnumerable(word)) {\n        // Block keywords start new blocks, except 'else if', which only starts\n        // one new block for the 'if', no block for the 'else'.\n        if (blockkeywords.propertyIsEnumerable(word) &&\n            !stream.match(/\\s*if(\\s+|$)/, false))\n          curPunc = \"block\";\n        return \"keyword\";\n      }\n      if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n      return \"variable\";\n    } else if (ch == \"%\") {\n      if (stream.skipTo(\"%\")) stream.next();\n      return \"operator variable-2\";\n    } else if (\n        (ch == \"<\" && stream.eat(\"-\")) ||\n        (ch == \"<\" && stream.match(\"<-\")) ||\n        (ch == \"-\" && stream.match(/>>?/))\n      ) {\n      return \"operator arrow\";\n    } else if (ch == \"=\" && state.ctx.argList) {\n      return \"arg-is\";\n    } else if (opChars.test(ch)) {\n      if (ch == \"$\") return \"operator dollar\";\n      stream.eatWhile(opChars);\n      return \"operator\";\n    } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n      curPunc = ch;\n      if (ch == \";\") return \"semi\";\n      return null;\n    } else {\n      return null;\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      if (stream.eat(\"\\\\\")) {\n        var ch = stream.next();\n        if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n        else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n        else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n        else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n        else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n        return \"string-2\";\n      } else {\n        var next;\n        while ((next = stream.next()) != null) {\n          if (next == quote) { state.tokenize = tokenBase; break; }\n          if (next == \"\\\\\") { stream.backUp(1); break; }\n        }\n        return \"string\";\n      }\n    };\n  }\n\n  var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4\n\n  function push(state, type, stream) {\n    state.ctx = {type: type,\n                 indent: state.indent,\n                 flags: 0,\n                 column: stream.column(),\n                 prev: state.ctx};\n  }\n  function setFlag(state, flag) {\n    var ctx = state.ctx\n    state.ctx = {type: ctx.type,\n                 indent: ctx.indent,\n                 flags: ctx.flags | flag,\n                 column: ctx.column,\n                 prev: ctx.prev}\n  }\n  function pop(state) {\n    state.indent = state.ctx.indent;\n    state.ctx = state.ctx.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              ctx: {type: \"top\",\n                    indent: -config.indentUnit,\n                    flags: ALIGN_NO},\n              indent: 0,\n              afterIdent: false};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO\n        if (state.ctx.flags & BRACELESS) pop(state)\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES)\n\n      if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n      if (curPunc == \"{\") push(state, \"}\", stream);\n      else if (curPunc == \"(\") {\n        push(state, \")\", stream);\n        if (state.afterIdent) state.ctx.argList = true;\n      }\n      else if (curPunc == \"[\") push(state, \"]\", stream);\n      else if (curPunc == \"block\") push(state, \"block\", stream);\n      else if (curPunc == state.ctx.type) pop(state);\n      else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS)\n      state.afterIdent = style == \"variable\" || style == \"keyword\";\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n          closing = firstChar == ctx.type;\n      if (ctx.flags & BRACELESS) ctx = ctx.prev\n      if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : config.indentUnit);\n      else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indent + (closing ? 0 : config.indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rsrc\", \"r\");\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/r/r.js\n// module id = 112\n// module chunks = 61"],"sourceRoot":""}