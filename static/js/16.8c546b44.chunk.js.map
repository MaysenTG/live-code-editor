{"version":3,"sources":["../static/js/16.8c546b44.chunk.js","../node_modules/codemirror/mode/pegjs/pegjs.js","../node_modules/codemirror/mode/javascript/javascript.js"],"names":["webpackJsonp","103","module","exports","__webpack_require__","mod","CodeMirror","defineMode","config","identifier","stream","match","jsMode","getMode","startState","inString","stringType","inComment","inCharacterClass","braced","lhs","localState","token","state","peek","next","eol","skipToEnd","text","current","i","length","indexOf","eatSpace","32","parserConfig","readRegexp","escaped","inSet","ret","tp","style","cont","type","content","tokenBase","ch","tokenize","tokenString","test","eat","tokenComment","expressionAllowed","tokenQuasi","eatWhile","wordRE","string","slice","start","isOperatorChar","lexical","word","lastType","keywords","propertyIsEnumerable","kw","quote","jsonldMode","isJsonldKeyword","maybeEnd","findFatArrow","fatArrowAt","arrow","isTS","m","exec","index","depth","sawSomething","pos","charAt","bracket","brackets","JSLexical","indented","column","align","prev","info","this","inScope","varname","trackScope","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","pop","jsonMode","expression","statement","lex","pass","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","pushcontext","defaultVars","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","atomicTypes","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","indentUnit","statementIndent","jsonld","json","typescript","wordCharacters","A","B","C","D","operator","atom","basecolumn","sol","indentation","Pass","top","firstChar","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME"],"mappings":"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","file":"static/js/16.8c546b44.chunk.js","sourcesContent":["webpackJsonp([16,86],{\n\n/***/ 103:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0), __webpack_require__(32));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../javascript/javascript\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pegjs\", function (config) {\n  var jsMode = CodeMirror.getMode(config, \"javascript\");\n\n  function identifier(stream) {\n    return stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n  }\n\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: null,\n        inComment: false,\n        inCharacterClass: false,\n        braced: 0,\n        lhs: true,\n        localState: null\n      };\n    },\n    token: function (stream, state) {\n      if (stream)\n\n      //check for state changes\n      if (!state.inString && !state.inComment && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (!state.inString && !state.inComment && stream.match('/*')) {\n        state.inComment = true;\n      }\n\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inComment) {\n        while (state.inComment && !stream.eol()) {\n          if (stream.match('*/')) {\n            state.inComment = false; // Clear flag\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n        return \"comment\";\n      } else if (state.inCharacterClass) {\n          while (state.inCharacterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.inCharacterClass = false;\n            }\n          }\n      } else if (stream.peek() === '[') {\n        stream.next();\n        state.inCharacterClass = true;\n        return 'bracket';\n      } else if (stream.match('//')) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (state.braced || stream.peek() === '{') {\n        if (state.localState === null) {\n          state.localState = CodeMirror.startState(jsMode);\n        }\n        var token = jsMode.token(stream, state.localState);\n        var text = stream.current();\n        if (!token) {\n          for (var i = 0; i < text.length; i++) {\n            if (text[i] === '{') {\n              state.braced++;\n            } else if (text[i] === '}') {\n              state.braced--;\n            }\n          };\n        }\n        return token;\n      } else if (identifier(stream)) {\n        if (stream.peek() === ':') {\n          return 'variable';\n        }\n        return 'variable-2';\n      } else if (['[', ']', '(', ')'].indexOf(stream.peek()) != -1) {\n        stream.next();\n        return 'bracket';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n}, \"javascript\");\n\n});\n\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/16.8c546b44.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../javascript/javascript\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../javascript/javascript\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pegjs\", function (config) {\n  var jsMode = CodeMirror.getMode(config, \"javascript\");\n\n  function identifier(stream) {\n    return stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n  }\n\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: null,\n        inComment: false,\n        inCharacterClass: false,\n        braced: 0,\n        lhs: true,\n        localState: null\n      };\n    },\n    token: function (stream, state) {\n      if (stream)\n\n      //check for state changes\n      if (!state.inString && !state.inComment && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (!state.inString && !state.inComment && stream.match('/*')) {\n        state.inComment = true;\n      }\n\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inComment) {\n        while (state.inComment && !stream.eol()) {\n          if (stream.match('*/')) {\n            state.inComment = false; // Clear flag\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n        return \"comment\";\n      } else if (state.inCharacterClass) {\n          while (state.inCharacterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.inCharacterClass = false;\n            }\n          }\n      } else if (stream.peek() === '[') {\n        stream.next();\n        state.inCharacterClass = true;\n        return 'bracket';\n      } else if (stream.match('//')) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (state.braced || stream.peek() === '{') {\n        if (state.localState === null) {\n          state.localState = CodeMirror.startState(jsMode);\n        }\n        var token = jsMode.token(stream, state.localState);\n        var text = stream.current();\n        if (!token) {\n          for (var i = 0; i < text.length; i++) {\n            if (text[i] === '{') {\n              state.braced++;\n            } else if (text[i] === '}') {\n              state.braced--;\n            }\n          };\n        }\n        return token;\n      } else if (identifier(stream)) {\n        if (stream.peek() === ':') {\n          return 'variable';\n        }\n        return 'variable-2';\n      } else if (['[', ']', '(', ')'].indexOf(stream.peek()) != -1) {\n        stream.next();\n        return 'bracket';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n}, \"javascript\");\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/pegjs/pegjs.js\n// module id = 103\n// module chunks = 16","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/javascript/javascript.js\n// module id = 32\n// module chunks = 0 1 2 3 4 5 6 7 8 9 12 16 86"],"sourceRoot":""}