{"version":3,"sources":["../static/js/99.ca5f579d.chunk.js","../node_modules/codemirror/mode/elm/elm.js"],"names":["webpackJsonp","68","module","exports","__webpack_require__","mod","CodeMirror","defineMode","switchState","source","setState","f","normal","eatWhile","spacesRE","char","next","specialRE","test","eat","chompMultiComment","match","chompGlsl","chompChar","chompMultiString","chompSingleString","upperRE","innerRE","lowerRE","isDef","pos","digitRE","hexRE","symbolRE","skipToEnd","nest","eol","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","where","import","exposing","port","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","defineMIME"],"mappings":"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","file":"static/js/99.ca5f579d.chunk.js","sourcesContent":["webpackJsonp([99],{\n\n/***/ 68:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f)\n    {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal()\n    {\n      return function(source, setState)\n      {\n        if (source.eatWhile(spacesRE))\n        {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char))\n        {\n          return (char === '{' && source.eat('-'))\n            ? switchState(source, setState, chompMultiComment(1))\n            : (char === '[' && source.match('glsl|'))\n                ? switchState(source, setState, chompGlsl)\n                : 'builtin';\n        }\n\n        if (char === '\\'')\n        {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"')\n        {\n          return source.eat('\"')\n            ? source.eat('\"')\n                ? switchState(source, setState, chompMultiString)\n                : 'string'\n            : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char))\n        {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char))\n        {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char))\n        {\n          if (char === '0')\n          {\n            if (source.eat(/[xX]/))\n            {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          else\n          {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.'))\n          {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/))\n          {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n\n        if (symbolRE.test(char))\n        {\n          if (char === '-' && source.eat('-'))\n          {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_')\n        {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function chompMultiComment(nest)\n    {\n      if (nest == 0)\n      {\n        return normal();\n      }\n      return function(source, setState)\n      {\n        while (!source.eol())\n        {\n          var char = source.next();\n          if (char == '{' && source.eat('-'))\n          {\n            ++nest;\n          }\n          else if (char == '-' && source.eat('}'))\n          {\n            --nest;\n            if (nest === 0)\n            {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      }\n    }\n\n    function chompMultiString(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    function chompSingleString(source, setState)\n    {\n      while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n      if (source.skipTo('\"'))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState)\n    {\n      while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n      if (source.skipTo(\"'\"))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '|' && source.eat(']'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      token: function(stream, state) {\n        var type = state.f(stream, function(s) { state.f = s; });\n        var word = stream.current();\n        return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/99.ca5f579d.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f)\n    {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal()\n    {\n      return function(source, setState)\n      {\n        if (source.eatWhile(spacesRE))\n        {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char))\n        {\n          return (char === '{' && source.eat('-'))\n            ? switchState(source, setState, chompMultiComment(1))\n            : (char === '[' && source.match('glsl|'))\n                ? switchState(source, setState, chompGlsl)\n                : 'builtin';\n        }\n\n        if (char === '\\'')\n        {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"')\n        {\n          return source.eat('\"')\n            ? source.eat('\"')\n                ? switchState(source, setState, chompMultiString)\n                : 'string'\n            : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char))\n        {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char))\n        {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char))\n        {\n          if (char === '0')\n          {\n            if (source.eat(/[xX]/))\n            {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          else\n          {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.'))\n          {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/))\n          {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n\n        if (symbolRE.test(char))\n        {\n          if (char === '-' && source.eat('-'))\n          {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_')\n        {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function chompMultiComment(nest)\n    {\n      if (nest == 0)\n      {\n        return normal();\n      }\n      return function(source, setState)\n      {\n        while (!source.eol())\n        {\n          var char = source.next();\n          if (char == '{' && source.eat('-'))\n          {\n            ++nest;\n          }\n          else if (char == '-' && source.eat('}'))\n          {\n            --nest;\n            if (nest === 0)\n            {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      }\n    }\n\n    function chompMultiString(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    function chompSingleString(source, setState)\n    {\n      while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n      if (source.skipTo('\"'))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState)\n    {\n      while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n      if (source.skipTo(\"'\"))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '|' && source.eat(']'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      token: function(stream, state) {\n        var type = state.f(stream, function(s) { state.f = s; });\n        var word = stream.current();\n        return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/elm/elm.js\n// module id = 68\n// module chunks = 99"],"sourceRoot":""}