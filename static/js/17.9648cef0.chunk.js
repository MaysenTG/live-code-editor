webpackJsonp([17,90],{40:function(e,t,n){!function(e){e(n(0))}(function(e){"use strict";e.defineMode("haskell",function(e,t){function n(e,t,n){return t(n),n(e,t)}function r(e,t){if(e.eatWhile(p))return null;var r=e.next();if(h.test(r)){if("{"==r&&e.eat("-")){var o="comment";return e.eat("#")&&(o="meta"),n(e,t,a(o,1))}return null}if("'"==r)return e.eat("\\"),e.next(),e.eat("'")?"string":"string error";if('"'==r)return n(e,t,i);if(u.test(r))return e.eatWhile(d),e.eat(".")?"qualifier":"variable-2";if(l.test(r))return e.eatWhile(d),"variable";if(s.test(r)){if("0"==r){if(e.eat(/[xX]/))return e.eatWhile(f),"integer";if(e.eat(/[oO]/))return e.eatWhile(c),"number"}e.eatWhile(s);var o="number";return e.match(/^\.\d+/)&&(o="number"),e.eat(/[eE]/)&&(o="number",e.eat(/[-+]/),e.eatWhile(s)),o}if("."==r&&e.eat("."))return"keyword";if(m.test(r)){if("-"==r&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(m)))return e.skipToEnd(),"comment";var o="variable";return":"==r&&(o="variable-2"),e.eatWhile(m),o}return"error"}function a(e,t){return 0==t?r:function(n,i){for(var o=t;!n.eol();){var l=n.next();if("{"==l&&n.eat("-"))++o;else if("-"==l&&n.eat("}")&&0==--o)return i(r),e}return i(a(e,o)),e}}function i(e,t){for(;!e.eol();){var n=e.next();if('"'==n)return t(r),"string";if("\\"==n){if(e.eol()||e.eat(p))return t(o),"string";e.eat("&")||e.next()}}return t(r),"string error"}function o(e,t){return e.eat("\\")?n(e,t,i):(e.next(),t(r),"error")}var l=/[a-z_]/,u=/[A-Z]/,s=/\d/,f=/[0-9A-Fa-f]/,c=/[0-7]/,d=/[a-z_A-Z0-9'\xa1-\uffff]/,m=/[-!#$%&*+.\/<=>?@\\^|~:]/,h=/[(),;[\]`{}]/,p=/[ \t\v\f]/,g=function(){function e(e){return function(){for(var t=0;t<arguments.length;t++)n[arguments[t]]=e}}var n={};e("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),e("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),e("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<*","<=","<$>","<*>","=<<","==",">",">=",">>",">>=","^","^^","||","*","*>","**"),e("builtin")("Applicative","Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),e("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","pure","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var r=t.overrideKeywords;if(r)for(var a in r)r.hasOwnProperty(a)&&(n[a]=r[a]);return n}();return{startState:function(){return{f:r}},copyState:function(e){return{f:e.f}},token:function(e,t){var n=t.f(e,function(e){t.f=e}),r=e.current();return g.hasOwnProperty(r)?g[r]:n},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),e.defineMIME("text/x-haskell","haskell")})},80:function(e,t,n){!function(e){e(n(0),n(40))}(function(e){"use strict";e.defineMode("haskell-literate",function(t,n){var r=e.getMode(t,n&&n.base||"haskell");return{startState:function(){return{inCode:!1,baseState:e.startState(r)}},token:function(e,t){return e.sol()&&(t.inCode=e.eat(">"))?"meta":t.inCode?r.token(e,t.baseState):(e.skipToEnd(),"comment")},innerMode:function(e){return e.inCode?{state:e.baseState,mode:r}:null}}},"haskell"),e.defineMIME("text/x-literate-haskell","haskell-literate")})}});
//# sourceMappingURL=17.9648cef0.chunk.js.map