{"version":3,"sources":["../static/js/32.a509f88e.chunk.js","../node_modules/codemirror/mode/vhdl/vhdl.js"],"names":["webpackJsonp","144","module","exports","__webpack_require__","mod","CodeMirror","words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","defineMode","config","parserConfig","tokenBase","state","ch","next","hooks","result","tokenize","tokenString2","tokenString","test","curPunc","eat","skipToEnd","isOperatorChar","cur","current","keywords","propertyIsEnumerable","toLowerCase","blockKeywords","atoms","quote","escaped","end","multiLineStrings","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","indentUnit","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","closing","electricChars","defineMIME"],"mappings":"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","file":"static/js/32.a509f88e.chunk.js","sourcesContent":["webpackJsonp([32],{\n\n/***/ 144:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Originally written by Alf Nielsen, re-written by Michael Zhou\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction words(str) {\n  var obj = {}, words = str.split(\",\");\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n  return obj;\n}\n\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\n\nCodeMirror.defineMode(\"vhdl\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      atoms = parserConfig.atoms || words(\"null\"),\n      hooks = parserConfig.hooks || {\"`\": metaHook, \"$\": metaHook},\n      multiLineStrings = parserConfig.multiLineStrings;\n\n  var keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" +\n      \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" +\n      \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" +\n      \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" +\n      \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" +\n      \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" +\n      \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n\n  var blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n\n  var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"') {\n      state.tokenize = tokenString2(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/[\\d']/.test(ch)) {\n      stream.eatWhile(/[\\w\\.']/);\n      return \"number\";\n    }\n    if (ch == \"-\") {\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n  function tokenString2(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string-2\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-vhdl\", \"vhdl\");\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/32.a509f88e.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Originally written by Alf Nielsen, re-written by Michael Zhou\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction words(str) {\n  var obj = {}, words = str.split(\",\");\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n  return obj;\n}\n\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\n\nCodeMirror.defineMode(\"vhdl\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      atoms = parserConfig.atoms || words(\"null\"),\n      hooks = parserConfig.hooks || {\"`\": metaHook, \"$\": metaHook},\n      multiLineStrings = parserConfig.multiLineStrings;\n\n  var keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" +\n      \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" +\n      \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" +\n      \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" +\n      \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" +\n      \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" +\n      \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n\n  var blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n\n  var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"') {\n      state.tokenize = tokenString2(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/[\\d']/.test(ch)) {\n      stream.eatWhile(/[\\w\\.']/);\n      return \"number\";\n    }\n    if (ch == \"-\") {\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n  function tokenString2(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string-2\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-vhdl\", \"vhdl\");\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/vhdl/vhdl.js\n// module id = 144\n// module chunks = 32"],"sourceRoot":""}