{"version":3,"sources":["../static/js/25.819c8d00.chunk.js","../node_modules/codemirror/mode/twig/twig.js","../node_modules/codemirror/addon/mode/multiplex.js"],"names":["webpackJsonp","139","module","exports","__webpack_require__","mod","CodeMirror","defineMode","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","operator","match","atom","number","sign","instring","next","eat","sol","keywords","RegExp","join","startState","token","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME","154","outer","indexOf","string","pattern","from","returnEnd","found","length","m","exec","slice","index","others","Array","prototype","call","arguments","innerActive","inner","startingInner","copyState","curInner","oldContent","this","pos","delimStyle","innerToken","start","innerStyle","cutOff","Infinity","i","other","outerIndent","indent","possibleOuterIndent","Pass","outerToken","textAfter","line","blankLine","electricChars","innerMode"],"mappings":"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","file":"static/js/25.819c8d00.chunk.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ 139:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0),  __webpack_require__(154));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n\n\n/***/ }),\n\n/***/ 154:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.multiplexingMode = function(outer /*, others */) {\n  // Others should be {open, close, mode [, delimStyle] [, innerStyle] [, parseDelimiters]} objects\n  var others = Array.prototype.slice.call(arguments, 1);\n\n  function indexOf(string, pattern, from, returnEnd) {\n    if (typeof pattern == \"string\") {\n      var found = string.indexOf(pattern, from);\n      return returnEnd && found > -1 ? found + pattern.length : found;\n    }\n    var m = pattern.exec(from ? string.slice(from) : string);\n    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n  }\n\n  return {\n    startState: function() {\n      return {\n        outer: CodeMirror.startState(outer),\n        innerActive: null,\n        inner: null,\n        startingInner: false\n      };\n    },\n\n    copyState: function(state) {\n      return {\n        outer: CodeMirror.copyState(outer, state.outer),\n        innerActive: state.innerActive,\n        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner),\n        startingInner: state.startingInner\n      };\n    },\n\n    token: function(stream, state) {\n      if (!state.innerActive) {\n        var cutOff = Infinity, oldContent = stream.string;\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          var found = indexOf(oldContent, other.open, stream.pos);\n          if (found == stream.pos) {\n            if (!other.parseDelimiters) stream.match(other.open);\n            state.startingInner = !!other.parseDelimiters\n            state.innerActive = other;\n\n            // Get the outer indent, making sure to handle CodeMirror.Pass\n            var outerIndent = 0;\n            if (outer.indent) {\n              var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n              if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n            }\n\n            state.inner = CodeMirror.startState(other.mode, outerIndent);\n            return other.delimStyle && (other.delimStyle + \" \" + other.delimStyle + \"-open\");\n          } else if (found != -1 && found < cutOff) {\n            cutOff = found;\n          }\n        }\n        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n        var outerToken = outer.token(stream, state.outer);\n        if (cutOff != Infinity) stream.string = oldContent;\n        return outerToken;\n      } else {\n        var curInner = state.innerActive, oldContent = stream.string;\n        if (!curInner.close && stream.sol()) {\n          state.innerActive = state.inner = null;\n          return this.token(stream, state);\n        }\n        var found = curInner.close && !state.startingInner ?\n            indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n        if (found == stream.pos && !curInner.parseDelimiters) {\n          stream.match(curInner.close);\n          state.innerActive = state.inner = null;\n          return curInner.delimStyle && (curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\");\n        }\n        if (found > -1) stream.string = oldContent.slice(0, found);\n        var innerToken = curInner.mode.token(stream, state.inner);\n        if (found > -1) stream.string = oldContent;\n        else if (stream.pos > stream.start) state.startingInner = false\n\n        if (found == stream.pos && curInner.parseDelimiters)\n          state.innerActive = state.inner = null;\n\n        if (curInner.innerStyle) {\n          if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;\n          else innerToken = curInner.innerStyle;\n        }\n\n        return innerToken;\n      }\n    },\n\n    indent: function(state, textAfter, line) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (!mode.indent) return CodeMirror.Pass;\n      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n    },\n\n    blankLine: function(state) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (mode.blankLine) {\n        mode.blankLine(state.innerActive ? state.inner : state.outer);\n      }\n      if (!state.innerActive) {\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          if (other.open === \"\\n\") {\n            state.innerActive = other;\n            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n          }\n        }\n      } else if (state.innerActive.close === \"\\n\") {\n        state.innerActive = state.inner = null;\n      }\n    },\n\n    electricChars: outer.electricChars,\n\n    innerMode: function(state) {\n      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n    }\n  };\n};\n\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/25.819c8d00.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/twig/twig.js\n// module id = 139\n// module chunks = 25","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.multiplexingMode = function(outer /*, others */) {\n  // Others should be {open, close, mode [, delimStyle] [, innerStyle] [, parseDelimiters]} objects\n  var others = Array.prototype.slice.call(arguments, 1);\n\n  function indexOf(string, pattern, from, returnEnd) {\n    if (typeof pattern == \"string\") {\n      var found = string.indexOf(pattern, from);\n      return returnEnd && found > -1 ? found + pattern.length : found;\n    }\n    var m = pattern.exec(from ? string.slice(from) : string);\n    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n  }\n\n  return {\n    startState: function() {\n      return {\n        outer: CodeMirror.startState(outer),\n        innerActive: null,\n        inner: null,\n        startingInner: false\n      };\n    },\n\n    copyState: function(state) {\n      return {\n        outer: CodeMirror.copyState(outer, state.outer),\n        innerActive: state.innerActive,\n        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner),\n        startingInner: state.startingInner\n      };\n    },\n\n    token: function(stream, state) {\n      if (!state.innerActive) {\n        var cutOff = Infinity, oldContent = stream.string;\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          var found = indexOf(oldContent, other.open, stream.pos);\n          if (found == stream.pos) {\n            if (!other.parseDelimiters) stream.match(other.open);\n            state.startingInner = !!other.parseDelimiters\n            state.innerActive = other;\n\n            // Get the outer indent, making sure to handle CodeMirror.Pass\n            var outerIndent = 0;\n            if (outer.indent) {\n              var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n              if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n            }\n\n            state.inner = CodeMirror.startState(other.mode, outerIndent);\n            return other.delimStyle && (other.delimStyle + \" \" + other.delimStyle + \"-open\");\n          } else if (found != -1 && found < cutOff) {\n            cutOff = found;\n          }\n        }\n        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n        var outerToken = outer.token(stream, state.outer);\n        if (cutOff != Infinity) stream.string = oldContent;\n        return outerToken;\n      } else {\n        var curInner = state.innerActive, oldContent = stream.string;\n        if (!curInner.close && stream.sol()) {\n          state.innerActive = state.inner = null;\n          return this.token(stream, state);\n        }\n        var found = curInner.close && !state.startingInner ?\n            indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n        if (found == stream.pos && !curInner.parseDelimiters) {\n          stream.match(curInner.close);\n          state.innerActive = state.inner = null;\n          return curInner.delimStyle && (curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\");\n        }\n        if (found > -1) stream.string = oldContent.slice(0, found);\n        var innerToken = curInner.mode.token(stream, state.inner);\n        if (found > -1) stream.string = oldContent;\n        else if (stream.pos > stream.start) state.startingInner = false\n\n        if (found == stream.pos && curInner.parseDelimiters)\n          state.innerActive = state.inner = null;\n\n        if (curInner.innerStyle) {\n          if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;\n          else innerToken = curInner.innerStyle;\n        }\n\n        return innerToken;\n      }\n    },\n\n    indent: function(state, textAfter, line) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (!mode.indent) return CodeMirror.Pass;\n      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n    },\n\n    blankLine: function(state) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (mode.blankLine) {\n        mode.blankLine(state.innerActive ? state.inner : state.outer);\n      }\n      if (!state.innerActive) {\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          if (other.open === \"\\n\") {\n            state.innerActive = other;\n            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n          }\n        }\n      } else if (state.innerActive.close === \"\\n\") {\n        state.innerActive = state.inner = null;\n      }\n    },\n\n    electricChars: outer.electricChars,\n\n    innerMode: function(state) {\n      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n    }\n  };\n};\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/addon/mode/multiplex.js\n// module id = 154\n// module chunks = 0 6 13 25"],"sourceRoot":""}