{"version":3,"sources":["../static/js/11.67600047.chunk.js","../node_modules/codemirror/addon/mode/overlay.js","../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/markdown/markdown.js","../node_modules/codemirror/mode/gfm/gfm.js"],"names":["webpackJsonp","153","module","exports","__webpack_require__","mod","CodeMirror","overlayMode","base","overlay","combine","startState","basePos","baseCur","overlayPos","overlayCur","streamSeen","copyState","state","token","stream","Math","min","start","pos","combineTokens","indent","textAfter","line","electricChars","innerMode","mode","blankLine","baseToken","overlayToken","31","htmlConfig","autoSelfClosers","implicitlyClosed","contextGrabbers","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","inText","chain","parser","tokenize","ch","next","eat","match","inBlock","eatWhile","doctype","type","inTag","ok","baseState","tagName","tagStart","test","inAttribute","stringStartCol","column","quote","closure","eol","isInAttribute","style","terminator","depth","Context","startOfLine","this","prev","context","indented","config","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","setStyle","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","indentUnit","defaults","htmlMode","prop","isInText","baseIndent","sol","indentation","eatSpace","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","xmlCurrentTag","name","close","xmlCurrentContext","cx","push","reverse","defineMIME","mimeModes","38","cmCfg","modeCfg","getMode","findModeByName","found","mime","mimes","switchInline","f","inline","switchBlock","block","lineIsEmpty","string","linkTitle","linkHref","linkText","em","strong","strikethrough","indentedCode","htmlBlock","exit","htmlModeMissing","inner","htmlState","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","firstTokenOnLine","prevLineLineIsEmpty","prevLineIsIndentedCode","prevLineIsHr","hr","prevLineIsList","list","maxNonCodeIndentation","listStack","lineIndentation","indentationDiff","pop","allowsInlineContinuation","header","fencedCodeEnd","isHr","hrRE","skipToEnd","tokenTypes","code","atxHeaderRE","highlightFormatting","formatting","getType","setext","listRE","listType","taskLists","taskListRE","taskList","fencedCodeRE","fencedEndRE","RegExp","localMode","fencedCodeBlockHighlighting","fencedCodeBlockDefaultMode","localState","local","linkDefRE","lookAhead","setextHeaderRE","charAt","peek","footnoteLink","md_inside","indexOf","currListInd","hasExitedList","maxFencedEndInd","returnType","styles","i","maxBlockquoteDepth","taskOpen","join","taskClosed","emoji","image","imageAltText","imageMarker","listMod","list2","list3","list1","handleText","textRE","text","matchCh","replace","regex","previousFormatting","count","t","formattingEscape","linkInline","linkEmail","xml","end","substring","backUp","len","before","after","leftFlanking","punctuation","rightFlanking","setEm","setStrong","retType","getLinkHrefInside","endChar","returnState","linkRE","footnoteLinkInside","footnoteUrl","undefined","tokenTypeOverrides","tokenType","allowAtxHeaderWithoutSpace","s","slice","closeBrackets","fold","75","urlRE","modeConfig","codeDepth","gfmOverlay","codeBlock","ateSpace","difference","gitHubSpice","markdownConfig","attr"],"mappings":"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","file":"static/js/11.67600047.chunk.js","sourcesContent":["webpackJsonp([11,15,30],{\n\n/***/ 153:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter, line) {\n      return base.indent(state.base, textAfter, line);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      var baseToken, overlayToken;\n      if (base.blankLine) baseToken = base.blankLine(state.base);\n      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n\n      return overlayToken == null ?\n        baseToken :\n        (combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken);\n    }\n  };\n};\n\n});\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar htmlConfig = {\n  autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,\n                    'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,\n                    'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,\n                    'track': true, 'wbr': true, 'menuitem': true},\n  implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,\n                     'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,\n                     'th': true, 'tr': true},\n  contextGrabbers: {\n    'dd': {'dd': true, 'dt': true},\n    'dt': {'dd': true, 'dt': true},\n    'li': {'li': true},\n    'option': {'option': true, 'optgroup': true},\n    'optgroup': {'optgroup': true},\n    'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,\n          'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,\n          'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,\n          'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,\n          'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},\n    'rp': {'rp': true, 'rt': true},\n    'rt': {'rp': true, 'rt': true},\n    'tbody': {'tbody': true, 'tfoot': true},\n    'td': {'td': true, 'th': true},\n    'tfoot': {'tbody': true},\n    'th': {'td': true, 'th': true},\n    'thead': {'tbody': true, 'tfoot': true},\n    'tr': {'tr': true}\n  },\n  doNotIndent: {\"pre\": true},\n  allowUnquoted: true,\n  allowMissing: true,\n  caseFold: true\n}\n\nvar xmlConfig = {\n  autoSelfClosers: {},\n  implicitlyClosed: {},\n  contextGrabbers: {},\n  doNotIndent: {},\n  allowUnquoted: false,\n  allowMissing: false,\n  allowMissingTagName: false,\n  caseFold: false\n}\n\nCodeMirror.defineMode(\"xml\", function(editorConf, config_) {\n  var indentUnit = editorConf.indentUnit\n  var config = {}\n  var defaults = config_.htmlMode ? htmlConfig : xmlConfig\n  for (var prop in defaults) config[prop] = defaults[prop]\n  for (var prop in config_) config[prop] = config_[prop]\n\n  // Return variables for tokenizers\n  var type, setStyle;\n\n  function inText(stream, state) {\n    function chain(parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    var ch = stream.next();\n    if (ch == \"<\") {\n      if (stream.eat(\"!\")) {\n        if (stream.eat(\"[\")) {\n          if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));\n          else return null;\n        } else if (stream.match(\"--\")) {\n          return chain(inBlock(\"comment\", \"-->\"));\n        } else if (stream.match(\"DOCTYPE\", true, true)) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          return chain(doctype(1));\n        } else {\n          return null;\n        }\n      } else if (stream.eat(\"?\")) {\n        stream.eatWhile(/[\\w\\._\\-]/);\n        state.tokenize = inBlock(\"meta\", \"?>\");\n        return \"meta\";\n      } else {\n        type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n        state.tokenize = inTag;\n        return \"tag bracket\";\n      }\n    } else if (ch == \"&\") {\n      var ok;\n      if (stream.eat(\"#\")) {\n        if (stream.eat(\"x\")) {\n          ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n        } else {\n          ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n        }\n      } else {\n        ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n      }\n      return ok ? \"atom\" : \"error\";\n    } else {\n      stream.eatWhile(/[^&<]/);\n      return null;\n    }\n  }\n  inText.isInText = true;\n\n  function inTag(stream, state) {\n    var ch = stream.next();\n    if (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n      state.tokenize = inText;\n      type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n      return \"tag bracket\";\n    } else if (ch == \"=\") {\n      type = \"equals\";\n      return null;\n    } else if (ch == \"<\") {\n      state.tokenize = inText;\n      state.state = baseState;\n      state.tagName = state.tagStart = null;\n      var next = state.tokenize(stream, state);\n      return next ? next + \" tag error\" : \"tag error\";\n    } else if (/[\\'\\\"]/.test(ch)) {\n      state.tokenize = inAttribute(ch);\n      state.stringStartCol = stream.column();\n      return state.tokenize(stream, state);\n    } else {\n      stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n      return \"word\";\n    }\n  }\n\n  function inAttribute(quote) {\n    var closure = function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.next() == quote) {\n          state.tokenize = inTag;\n          break;\n        }\n      }\n      return \"string\";\n    };\n    closure.isInAttribute = true;\n    return closure;\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = inText;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    }\n  }\n\n  function doctype(depth) {\n    return function(stream, state) {\n      var ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == \"<\") {\n          state.tokenize = doctype(depth + 1);\n          return state.tokenize(stream, state);\n        } else if (ch == \">\") {\n          if (depth == 1) {\n            state.tokenize = inText;\n            break;\n          } else {\n            state.tokenize = doctype(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n      return \"meta\";\n    };\n  }\n\n  function Context(state, tagName, startOfLine) {\n    this.prev = state.context;\n    this.tagName = tagName || \"\";\n    this.indent = state.indented;\n    this.startOfLine = startOfLine;\n    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context && state.context.noIndent))\n      this.noIndent = true;\n  }\n  function popContext(state) {\n    if (state.context) state.context = state.context.prev;\n  }\n  function maybePopContext(state, nextTagName) {\n    var parentTagName;\n    while (true) {\n      if (!state.context) {\n        return;\n      }\n      parentTagName = state.context.tagName;\n      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||\n          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n        return;\n      }\n      popContext(state);\n    }\n  }\n\n  function baseState(type, stream, state) {\n    if (type == \"openTag\") {\n      state.tagStart = stream.column();\n      return tagNameState;\n    } else if (type == \"closeTag\") {\n      return closeTagNameState;\n    } else {\n      return baseState;\n    }\n  }\n  function tagNameState(type, stream, state) {\n    if (type == \"word\") {\n      state.tagName = stream.current();\n      setStyle = \"tag\";\n      return attrState;\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return attrState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return tagNameState;\n    }\n  }\n  function closeTagNameState(type, stream, state) {\n    if (type == \"word\") {\n      var tagName = stream.current();\n      if (state.context && state.context.tagName != tagName &&\n          config.implicitlyClosed.hasOwnProperty(state.context.tagName))\n        popContext(state);\n      if ((state.context && state.context.tagName == tagName) || config.matchClosing === false) {\n        setStyle = \"tag\";\n        return closeState;\n      } else {\n        setStyle = \"tag error\";\n        return closeStateErr;\n      }\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return closeState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return closeStateErr;\n    }\n  }\n\n  function closeState(type, _stream, state) {\n    if (type != \"endTag\") {\n      setStyle = \"error\";\n      return closeState;\n    }\n    popContext(state);\n    return baseState;\n  }\n  function closeStateErr(type, stream, state) {\n    setStyle = \"error\";\n    return closeState(type, stream, state);\n  }\n\n  function attrState(type, _stream, state) {\n    if (type == \"word\") {\n      setStyle = \"attribute\";\n      return attrEqState;\n    } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n      var tagName = state.tagName, tagStart = state.tagStart;\n      state.tagName = state.tagStart = null;\n      if (type == \"selfcloseTag\" ||\n          config.autoSelfClosers.hasOwnProperty(tagName)) {\n        maybePopContext(state, tagName);\n      } else {\n        maybePopContext(state, tagName);\n        state.context = new Context(state, tagName, tagStart == state.indented);\n      }\n      return baseState;\n    }\n    setStyle = \"error\";\n    return attrState;\n  }\n  function attrEqState(type, stream, state) {\n    if (type == \"equals\") return attrValueState;\n    if (!config.allowMissing) setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrValueState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    if (type == \"word\" && config.allowUnquoted) {setStyle = \"string\"; return attrState;}\n    setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrContinuedState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    return attrState(type, stream, state);\n  }\n\n  return {\n    startState: function(baseIndent) {\n      var state = {tokenize: inText,\n                   state: baseState,\n                   indented: baseIndent || 0,\n                   tagName: null, tagStart: null,\n                   context: null}\n      if (baseIndent != null) state.baseIndent = baseIndent\n      return state\n    },\n\n    token: function(stream, state) {\n      if (!state.tagName && stream.sol())\n        state.indented = stream.indentation();\n\n      if (stream.eatSpace()) return null;\n      type = null;\n      var style = state.tokenize(stream, state);\n      if ((style || type) && style != \"comment\") {\n        setStyle = null;\n        state.state = state.state(type || style, stream, state);\n        if (setStyle)\n          style = setStyle == \"error\" ? style + \" error\" : setStyle;\n      }\n      return style;\n    },\n\n    indent: function(state, textAfter, fullLine) {\n      var context = state.context;\n      // Indent multi-line strings (e.g. css).\n      if (state.tokenize.isInAttribute) {\n        if (state.tagStart == state.indented)\n          return state.stringStartCol + 1;\n        else\n          return state.indented + indentUnit;\n      }\n      if (context && context.noIndent) return CodeMirror.Pass;\n      if (state.tokenize != inTag && state.tokenize != inText)\n        return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\n      // Indent the starts of attribute names.\n      if (state.tagName) {\n        if (config.multilineTagIndentPastTag !== false)\n          return state.tagStart + state.tagName.length + 2;\n        else\n          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n      }\n      if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n      var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n      if (tagAfter && tagAfter[1]) { // Closing tag spotted\n        while (context) {\n          if (context.tagName == tagAfter[2]) {\n            context = context.prev;\n            break;\n          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n            context = context.prev;\n          } else {\n            break;\n          }\n        }\n      } else if (tagAfter) { // Opening tag spotted\n        while (context) {\n          var grabbers = config.contextGrabbers[context.tagName];\n          if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))\n            context = context.prev;\n          else\n            break;\n        }\n      }\n      while (context && context.prev && !context.startOfLine)\n        context = context.prev;\n      if (context) return context.indent + indentUnit;\n      else return state.baseIndent || 0;\n    },\n\n    electricInput: /<\\/[\\s\\w:]+>$/,\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n\n    configuration: config.htmlMode ? \"html\" : \"xml\",\n    helperType: config.htmlMode ? \"html\" : \"xml\",\n\n    skipAttribute: function(state) {\n      if (state.state == attrValueState)\n        state.state = attrState\n    },\n\n    xmlCurrentTag: function(state) {\n      return state.tagName ? {name: state.tagName, close: state.type == \"closeTag\"} : null\n    },\n\n    xmlCurrentContext: function(state) {\n      var context = []\n      for (var cx = state.context; cx; cx = cx.prev)\n        context.push(cx.tagName)\n      return context.reverse()\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/xml\", \"xml\");\nCodeMirror.defineMIME(\"application/xml\", \"xml\");\nif (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\"))\n  CodeMirror.defineMIME(\"text/html\", {name: \"xml\", htmlMode: true});\n\n});\n\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0), __webpack_require__(31), __webpack_require__(3));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.fencedCodeBlockDefaultMode === undefined)\n    modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n      // Reset inline styles which shouldn't propagate across list items\n      state.em = false;\n      state.strong = false;\n      state.code = false;\n      state.strikethrough = false;\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode );\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match('~~', true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(']:', true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|\\((?:[^)\\\\]|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n\n\n/***/ }),\n\n/***/ 75:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0), __webpack_require__(38), __webpack_require__(153));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../markdown/markdown\", \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar urlRE = /^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\\.beep|\\.lwz|\\.xpc|\\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\\.beeps?|xmpp|xri|ymsgr|z39\\.50[rs]?):(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\([^\\s()<>]*\\))+(?:\\([^\\s()<>]*\\)|[^\\s`*!()\\[\\]{};:'\".,<>?«»“”‘’]))/i\n\nCodeMirror.defineMode(\"gfm\", function(config, modeConfig) {\n  var codeDepth = 0;\n  function blankLine(state) {\n    state.code = false;\n    return null;\n  }\n  var gfmOverlay = {\n    startState: function() {\n      return {\n        code: false,\n        codeBlock: false,\n        ateSpace: false\n      };\n    },\n    copyState: function(s) {\n      return {\n        code: s.code,\n        codeBlock: s.codeBlock,\n        ateSpace: s.ateSpace\n      };\n    },\n    token: function(stream, state) {\n      state.combineTokens = null;\n\n      // Hack to prevent formatting override inside code blocks (block and inline)\n      if (state.codeBlock) {\n        if (stream.match(/^```+/)) {\n          state.codeBlock = false;\n          return null;\n        }\n        stream.skipToEnd();\n        return null;\n      }\n      if (stream.sol()) {\n        state.code = false;\n      }\n      if (stream.sol() && stream.match(/^```+/)) {\n        stream.skipToEnd();\n        state.codeBlock = true;\n        return null;\n      }\n      // If this block is changed, it may need to be updated in Markdown mode\n      if (stream.peek() === '`') {\n        stream.next();\n        var before = stream.pos;\n        stream.eatWhile('`');\n        var difference = 1 + stream.pos - before;\n        if (!state.code) {\n          codeDepth = difference;\n          state.code = true;\n        } else {\n          if (difference === codeDepth) { // Must be exact\n            state.code = false;\n          }\n        }\n        return null;\n      } else if (state.code) {\n        stream.next();\n        return null;\n      }\n      // Check if space. If so, links can be formatted later on\n      if (stream.eatSpace()) {\n        state.ateSpace = true;\n        return null;\n      }\n      if (stream.sol() || state.ateSpace) {\n        state.ateSpace = false;\n        if (modeConfig.gitHubSpice !== false) {\n          if(stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+@)?(?=.{0,6}\\d)(?:[a-f0-9]{7,40}\\b)/)) {\n            // User/Project@SHA\n            // User@SHA\n            // SHA\n            state.combineTokens = true;\n            return \"link\";\n          } else if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+)?#[0-9]+\\b/)) {\n            // User/Project#Num\n            // User#Num\n            // #Num\n            state.combineTokens = true;\n            return \"link\";\n          }\n        }\n      }\n      if (stream.match(urlRE) &&\n          stream.string.slice(stream.start - 2, stream.start) != \"](\" &&\n          (stream.start == 0 || /\\W/.test(stream.string.charAt(stream.start - 1)))) {\n        // URLs\n        // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n        // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine\n        // And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL\n        state.combineTokens = true;\n        return \"link\";\n      }\n      stream.next();\n      return null;\n    },\n    blankLine: blankLine\n  };\n\n  var markdownConfig = {\n    taskLists: true,\n    strikethrough: true,\n    emoji: true\n  };\n  for (var attr in modeConfig) {\n    markdownConfig[attr] = modeConfig[attr];\n  }\n  markdownConfig.name = \"markdown\";\n  return CodeMirror.overlayMode(CodeMirror.getMode(config, markdownConfig), gfmOverlay);\n\n}, \"markdown\");\n\n  CodeMirror.defineMIME(\"text/x-gfm\", \"gfm\");\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/11.67600047.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter, line) {\n      return base.indent(state.base, textAfter, line);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      var baseToken, overlayToken;\n      if (base.blankLine) baseToken = base.blankLine(state.base);\n      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n\n      return overlayToken == null ?\n        baseToken :\n        (combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken);\n    }\n  };\n};\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/addon/mode/overlay.js\n// module id = 153\n// module chunks = 0 4 5 10 11","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar htmlConfig = {\n  autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,\n                    'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,\n                    'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,\n                    'track': true, 'wbr': true, 'menuitem': true},\n  implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,\n                     'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,\n                     'th': true, 'tr': true},\n  contextGrabbers: {\n    'dd': {'dd': true, 'dt': true},\n    'dt': {'dd': true, 'dt': true},\n    'li': {'li': true},\n    'option': {'option': true, 'optgroup': true},\n    'optgroup': {'optgroup': true},\n    'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,\n          'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,\n          'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,\n          'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,\n          'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},\n    'rp': {'rp': true, 'rt': true},\n    'rt': {'rp': true, 'rt': true},\n    'tbody': {'tbody': true, 'tfoot': true},\n    'td': {'td': true, 'th': true},\n    'tfoot': {'tbody': true},\n    'th': {'td': true, 'th': true},\n    'thead': {'tbody': true, 'tfoot': true},\n    'tr': {'tr': true}\n  },\n  doNotIndent: {\"pre\": true},\n  allowUnquoted: true,\n  allowMissing: true,\n  caseFold: true\n}\n\nvar xmlConfig = {\n  autoSelfClosers: {},\n  implicitlyClosed: {},\n  contextGrabbers: {},\n  doNotIndent: {},\n  allowUnquoted: false,\n  allowMissing: false,\n  allowMissingTagName: false,\n  caseFold: false\n}\n\nCodeMirror.defineMode(\"xml\", function(editorConf, config_) {\n  var indentUnit = editorConf.indentUnit\n  var config = {}\n  var defaults = config_.htmlMode ? htmlConfig : xmlConfig\n  for (var prop in defaults) config[prop] = defaults[prop]\n  for (var prop in config_) config[prop] = config_[prop]\n\n  // Return variables for tokenizers\n  var type, setStyle;\n\n  function inText(stream, state) {\n    function chain(parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    var ch = stream.next();\n    if (ch == \"<\") {\n      if (stream.eat(\"!\")) {\n        if (stream.eat(\"[\")) {\n          if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));\n          else return null;\n        } else if (stream.match(\"--\")) {\n          return chain(inBlock(\"comment\", \"-->\"));\n        } else if (stream.match(\"DOCTYPE\", true, true)) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          return chain(doctype(1));\n        } else {\n          return null;\n        }\n      } else if (stream.eat(\"?\")) {\n        stream.eatWhile(/[\\w\\._\\-]/);\n        state.tokenize = inBlock(\"meta\", \"?>\");\n        return \"meta\";\n      } else {\n        type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n        state.tokenize = inTag;\n        return \"tag bracket\";\n      }\n    } else if (ch == \"&\") {\n      var ok;\n      if (stream.eat(\"#\")) {\n        if (stream.eat(\"x\")) {\n          ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n        } else {\n          ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n        }\n      } else {\n        ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n      }\n      return ok ? \"atom\" : \"error\";\n    } else {\n      stream.eatWhile(/[^&<]/);\n      return null;\n    }\n  }\n  inText.isInText = true;\n\n  function inTag(stream, state) {\n    var ch = stream.next();\n    if (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n      state.tokenize = inText;\n      type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n      return \"tag bracket\";\n    } else if (ch == \"=\") {\n      type = \"equals\";\n      return null;\n    } else if (ch == \"<\") {\n      state.tokenize = inText;\n      state.state = baseState;\n      state.tagName = state.tagStart = null;\n      var next = state.tokenize(stream, state);\n      return next ? next + \" tag error\" : \"tag error\";\n    } else if (/[\\'\\\"]/.test(ch)) {\n      state.tokenize = inAttribute(ch);\n      state.stringStartCol = stream.column();\n      return state.tokenize(stream, state);\n    } else {\n      stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n      return \"word\";\n    }\n  }\n\n  function inAttribute(quote) {\n    var closure = function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.next() == quote) {\n          state.tokenize = inTag;\n          break;\n        }\n      }\n      return \"string\";\n    };\n    closure.isInAttribute = true;\n    return closure;\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = inText;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    }\n  }\n\n  function doctype(depth) {\n    return function(stream, state) {\n      var ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == \"<\") {\n          state.tokenize = doctype(depth + 1);\n          return state.tokenize(stream, state);\n        } else if (ch == \">\") {\n          if (depth == 1) {\n            state.tokenize = inText;\n            break;\n          } else {\n            state.tokenize = doctype(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n      return \"meta\";\n    };\n  }\n\n  function Context(state, tagName, startOfLine) {\n    this.prev = state.context;\n    this.tagName = tagName || \"\";\n    this.indent = state.indented;\n    this.startOfLine = startOfLine;\n    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context && state.context.noIndent))\n      this.noIndent = true;\n  }\n  function popContext(state) {\n    if (state.context) state.context = state.context.prev;\n  }\n  function maybePopContext(state, nextTagName) {\n    var parentTagName;\n    while (true) {\n      if (!state.context) {\n        return;\n      }\n      parentTagName = state.context.tagName;\n      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||\n          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n        return;\n      }\n      popContext(state);\n    }\n  }\n\n  function baseState(type, stream, state) {\n    if (type == \"openTag\") {\n      state.tagStart = stream.column();\n      return tagNameState;\n    } else if (type == \"closeTag\") {\n      return closeTagNameState;\n    } else {\n      return baseState;\n    }\n  }\n  function tagNameState(type, stream, state) {\n    if (type == \"word\") {\n      state.tagName = stream.current();\n      setStyle = \"tag\";\n      return attrState;\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return attrState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return tagNameState;\n    }\n  }\n  function closeTagNameState(type, stream, state) {\n    if (type == \"word\") {\n      var tagName = stream.current();\n      if (state.context && state.context.tagName != tagName &&\n          config.implicitlyClosed.hasOwnProperty(state.context.tagName))\n        popContext(state);\n      if ((state.context && state.context.tagName == tagName) || config.matchClosing === false) {\n        setStyle = \"tag\";\n        return closeState;\n      } else {\n        setStyle = \"tag error\";\n        return closeStateErr;\n      }\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return closeState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return closeStateErr;\n    }\n  }\n\n  function closeState(type, _stream, state) {\n    if (type != \"endTag\") {\n      setStyle = \"error\";\n      return closeState;\n    }\n    popContext(state);\n    return baseState;\n  }\n  function closeStateErr(type, stream, state) {\n    setStyle = \"error\";\n    return closeState(type, stream, state);\n  }\n\n  function attrState(type, _stream, state) {\n    if (type == \"word\") {\n      setStyle = \"attribute\";\n      return attrEqState;\n    } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n      var tagName = state.tagName, tagStart = state.tagStart;\n      state.tagName = state.tagStart = null;\n      if (type == \"selfcloseTag\" ||\n          config.autoSelfClosers.hasOwnProperty(tagName)) {\n        maybePopContext(state, tagName);\n      } else {\n        maybePopContext(state, tagName);\n        state.context = new Context(state, tagName, tagStart == state.indented);\n      }\n      return baseState;\n    }\n    setStyle = \"error\";\n    return attrState;\n  }\n  function attrEqState(type, stream, state) {\n    if (type == \"equals\") return attrValueState;\n    if (!config.allowMissing) setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrValueState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    if (type == \"word\" && config.allowUnquoted) {setStyle = \"string\"; return attrState;}\n    setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrContinuedState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    return attrState(type, stream, state);\n  }\n\n  return {\n    startState: function(baseIndent) {\n      var state = {tokenize: inText,\n                   state: baseState,\n                   indented: baseIndent || 0,\n                   tagName: null, tagStart: null,\n                   context: null}\n      if (baseIndent != null) state.baseIndent = baseIndent\n      return state\n    },\n\n    token: function(stream, state) {\n      if (!state.tagName && stream.sol())\n        state.indented = stream.indentation();\n\n      if (stream.eatSpace()) return null;\n      type = null;\n      var style = state.tokenize(stream, state);\n      if ((style || type) && style != \"comment\") {\n        setStyle = null;\n        state.state = state.state(type || style, stream, state);\n        if (setStyle)\n          style = setStyle == \"error\" ? style + \" error\" : setStyle;\n      }\n      return style;\n    },\n\n    indent: function(state, textAfter, fullLine) {\n      var context = state.context;\n      // Indent multi-line strings (e.g. css).\n      if (state.tokenize.isInAttribute) {\n        if (state.tagStart == state.indented)\n          return state.stringStartCol + 1;\n        else\n          return state.indented + indentUnit;\n      }\n      if (context && context.noIndent) return CodeMirror.Pass;\n      if (state.tokenize != inTag && state.tokenize != inText)\n        return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\n      // Indent the starts of attribute names.\n      if (state.tagName) {\n        if (config.multilineTagIndentPastTag !== false)\n          return state.tagStart + state.tagName.length + 2;\n        else\n          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n      }\n      if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n      var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n      if (tagAfter && tagAfter[1]) { // Closing tag spotted\n        while (context) {\n          if (context.tagName == tagAfter[2]) {\n            context = context.prev;\n            break;\n          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n            context = context.prev;\n          } else {\n            break;\n          }\n        }\n      } else if (tagAfter) { // Opening tag spotted\n        while (context) {\n          var grabbers = config.contextGrabbers[context.tagName];\n          if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))\n            context = context.prev;\n          else\n            break;\n        }\n      }\n      while (context && context.prev && !context.startOfLine)\n        context = context.prev;\n      if (context) return context.indent + indentUnit;\n      else return state.baseIndent || 0;\n    },\n\n    electricInput: /<\\/[\\s\\w:]+>$/,\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n\n    configuration: config.htmlMode ? \"html\" : \"xml\",\n    helperType: config.htmlMode ? \"html\" : \"xml\",\n\n    skipAttribute: function(state) {\n      if (state.state == attrValueState)\n        state.state = attrState\n    },\n\n    xmlCurrentTag: function(state) {\n      return state.tagName ? {name: state.tagName, close: state.type == \"closeTag\"} : null\n    },\n\n    xmlCurrentContext: function(state) {\n      var context = []\n      for (var cx = state.context; cx; cx = cx.prev)\n        context.push(cx.tagName)\n      return context.reverse()\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/xml\", \"xml\");\nCodeMirror.defineMIME(\"application/xml\", \"xml\");\nif (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\"))\n  CodeMirror.defineMIME(\"text/html\", {name: \"xml\", htmlMode: true});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/xml/xml.js\n// module id = 31\n// module chunks = 0 1 2 3 4 5 6 7 8 9 11 12 15 30","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.fencedCodeBlockDefaultMode === undefined)\n    modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n      // Reset inline styles which shouldn't propagate across list items\n      state.em = false;\n      state.strong = false;\n      state.code = false;\n      state.strikethrough = false;\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode );\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match('~~', true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(']:', true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|\\((?:[^)\\\\]|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/markdown/markdown.js\n// module id = 38\n// module chunks = 11 15","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../markdown/markdown\"), require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../markdown/markdown\", \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar urlRE = /^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\\.beep|\\.lwz|\\.xpc|\\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\\.beeps?|xmpp|xri|ymsgr|z39\\.50[rs]?):(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\([^\\s()<>]*\\))+(?:\\([^\\s()<>]*\\)|[^\\s`*!()\\[\\]{};:'\".,<>?«»“”‘’]))/i\n\nCodeMirror.defineMode(\"gfm\", function(config, modeConfig) {\n  var codeDepth = 0;\n  function blankLine(state) {\n    state.code = false;\n    return null;\n  }\n  var gfmOverlay = {\n    startState: function() {\n      return {\n        code: false,\n        codeBlock: false,\n        ateSpace: false\n      };\n    },\n    copyState: function(s) {\n      return {\n        code: s.code,\n        codeBlock: s.codeBlock,\n        ateSpace: s.ateSpace\n      };\n    },\n    token: function(stream, state) {\n      state.combineTokens = null;\n\n      // Hack to prevent formatting override inside code blocks (block and inline)\n      if (state.codeBlock) {\n        if (stream.match(/^```+/)) {\n          state.codeBlock = false;\n          return null;\n        }\n        stream.skipToEnd();\n        return null;\n      }\n      if (stream.sol()) {\n        state.code = false;\n      }\n      if (stream.sol() && stream.match(/^```+/)) {\n        stream.skipToEnd();\n        state.codeBlock = true;\n        return null;\n      }\n      // If this block is changed, it may need to be updated in Markdown mode\n      if (stream.peek() === '`') {\n        stream.next();\n        var before = stream.pos;\n        stream.eatWhile('`');\n        var difference = 1 + stream.pos - before;\n        if (!state.code) {\n          codeDepth = difference;\n          state.code = true;\n        } else {\n          if (difference === codeDepth) { // Must be exact\n            state.code = false;\n          }\n        }\n        return null;\n      } else if (state.code) {\n        stream.next();\n        return null;\n      }\n      // Check if space. If so, links can be formatted later on\n      if (stream.eatSpace()) {\n        state.ateSpace = true;\n        return null;\n      }\n      if (stream.sol() || state.ateSpace) {\n        state.ateSpace = false;\n        if (modeConfig.gitHubSpice !== false) {\n          if(stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+@)?(?=.{0,6}\\d)(?:[a-f0-9]{7,40}\\b)/)) {\n            // User/Project@SHA\n            // User@SHA\n            // SHA\n            state.combineTokens = true;\n            return \"link\";\n          } else if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+)?#[0-9]+\\b/)) {\n            // User/Project#Num\n            // User#Num\n            // #Num\n            state.combineTokens = true;\n            return \"link\";\n          }\n        }\n      }\n      if (stream.match(urlRE) &&\n          stream.string.slice(stream.start - 2, stream.start) != \"](\" &&\n          (stream.start == 0 || /\\W/.test(stream.string.charAt(stream.start - 1)))) {\n        // URLs\n        // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n        // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine\n        // And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL\n        state.combineTokens = true;\n        return \"link\";\n      }\n      stream.next();\n      return null;\n    },\n    blankLine: blankLine\n  };\n\n  var markdownConfig = {\n    taskLists: true,\n    strikethrough: true,\n    emoji: true\n  };\n  for (var attr in modeConfig) {\n    markdownConfig[attr] = modeConfig[attr];\n  }\n  markdownConfig.name = \"markdown\";\n  return CodeMirror.overlayMode(CodeMirror.getMode(config, markdownConfig), gfmOverlay);\n\n}, \"markdown\");\n\n  CodeMirror.defineMIME(\"text/x-gfm\", \"gfm\");\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/gfm/gfm.js\n// module id = 75\n// module chunks = 11"],"sourceRoot":""}