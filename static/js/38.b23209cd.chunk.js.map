{"version":3,"sources":["../static/js/38.b23209cd.chunk.js","../node_modules/codemirror/mode/ttcn/ttcn.js"],"names":["webpackJsonp","136","module","exports","__webpack_require__","mod","CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","tokenBase","stream","state","ch","next","tokenize","tokenString","test","curPunc","skipToEnd","eatWhile","eat","tokenComment","isOperatorChar","match","cur","current","keywords","propertyIsEnumerable","builtin","timerOps","configOps","verdictOps","portOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","types","visibilityModifiers","templateMatch","quote","escaped","end","afterQuote","peek","toLowerCase","multiLineStrings","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","indentUnit","indentStatements","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","blockCommentStart","blockCommentEnd","lineComment","fold","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","name"],"mappings":"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","file":"static/js/38.b23209cd.chunk.js","sourcesContent":["webpackJsonp([38],{\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(0));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps  = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts   = parserConfig.otherConsts || {},\n\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\"){\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if(ch == \"@\"){\n          if(stream.match(\"try\") || stream.match(\"catch\")\n              || stream.match(\"lazy\")){\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur))\n        return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote){\n              afterQuote = afterQuote.toLowerCase();\n              if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements &&\n            (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n            (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n\n        return style;\n      },\n\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" +\n    \" break case component const continue control deactivate\" +\n    \" display do else encode enumerated except exception\" +\n    \" execute extends extension external for from function\" +\n    \" goto group if import in infinity inout interleave\" +\n    \" label language length log match message mixed mod\" +\n    \" modifies module modulepar mtc noblock not not4b nowait\" +\n    \" of on optional or or4b out override param pattern port\" +\n    \" procedure record recursive rem repeat return runs select\" +\n    \" self sender set signature system template testcase to\" +\n    \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n    \" decomp decvalue float2int float2str hex2bit hex2int\" +\n    \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n    \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n    \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n    \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n    \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n    \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" +\n    \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n    \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/38.b23209cd.chunk.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps  = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts   = parserConfig.otherConsts || {},\n\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\"){\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if(ch == \"@\"){\n          if(stream.match(\"try\") || stream.match(\"catch\")\n              || stream.match(\"lazy\")){\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur))\n        return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote){\n              afterQuote = afterQuote.toLowerCase();\n              if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements &&\n            (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n            (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n\n        return style;\n      },\n\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" +\n    \" break case component const continue control deactivate\" +\n    \" display do else encode enumerated except exception\" +\n    \" execute extends extension external for from function\" +\n    \" goto group if import in infinity inout interleave\" +\n    \" label language length log match message mixed mod\" +\n    \" modifies module modulepar mtc noblock not not4b nowait\" +\n    \" of on optional or or4b out override param pattern port\" +\n    \" procedure record recursive rem repeat return runs select\" +\n    \" self sender set signature system template testcase to\" +\n    \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n    \" decomp decvalue float2int float2str hex2bit hex2int\" +\n    \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n    \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n    \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n    \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n    \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n    \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" +\n    \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n    \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/codemirror/mode/ttcn/ttcn.js\n// module id = 136\n// module chunks = 38"],"sourceRoot":""}